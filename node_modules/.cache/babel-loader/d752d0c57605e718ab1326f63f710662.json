{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/javis/Documents/GitHub/Boggle-Web-App/src/GuessInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport TextField from \"@material-ui/core/TextField\";\nimport './GuessInput.css';\n\nfunction GuessInput({\n  allSolutions,\n  foundSolutions,\n  correctAnswerCallback,\n  remainder,\n  setRemainder\n}) {\n  _s();\n\n  const [labelText, setLabelText] = useState(\"Make your first guess!\");\n  const [input, setInput] = useState(\"\");\n\n  function evaluateInput() {\n    if (foundSolutions.includes(input)) {\n      setLabelText(input + \" has already been found!\");\n    } else if (allSolutions.includes(input)) {\n      // correctAnswerCallback(input);\n      correctAnswerCallback(foundSolutions => foundSolutions.concat(input));\n      setLabelText(input + \" is correct!\");\n      var idx = remainder.indexOf(input);\n\n      while (idx != -1) {\n        remainder.splice(idx, 1);\n        setRemainder(remainder);\n        idx = remainder.indexOf(input);\n      }\n    } else {\n      setLabelText(input + \" is incorrect!\");\n    }\n  }\n\n  function keyPress(e) {\n    if (e.key === 'Enter') {\n      e.target.value = \"\";\n      evaluateInput();\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Guess-input\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: labelText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      onKeyPress: e => keyPress(e),\n      onChange: event => setInput(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GuessInput, \"s7MgwPfCCZHap5DjwWQVRlEHQJw=\");\n\n_c = GuessInput;\nexport default GuessInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"GuessInput\");","map":{"version":3,"sources":["/Users/javis/Documents/GitHub/Boggle-Web-App/src/GuessInput.js"],"names":["React","useState","TextField","GuessInput","allSolutions","foundSolutions","correctAnswerCallback","remainder","setRemainder","labelText","setLabelText","input","setInput","evaluateInput","includes","concat","idx","indexOf","splice","keyPress","e","key","target","value","event"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAO,kBAAP;;AAEA,SAASC,UAAT,CAAoB;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA,cAAhB;AAAgCC,EAAAA,qBAAhC;AAAuDC,EAAAA,SAAvD;AAAkEC,EAAAA;AAAlE,CAApB,EAAsG;AAAA;;AAEpG,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,wBAAD,CAA1C;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC;;AAEA,WAASY,aAAT,GAAyB;AACvB,QAAIR,cAAc,CAACS,QAAf,CAAwBH,KAAxB,CAAJ,EAAoC;AAClCD,MAAAA,YAAY,CAACC,KAAK,GAAG,0BAAT,CAAZ;AACD,KAFD,MAEO,IAAIP,YAAY,CAACU,QAAb,CAAsBH,KAAtB,CAAJ,EAAkC;AACvC;AACAL,MAAAA,qBAAqB,CAACD,cAAc,IAAIA,cAAc,CAACU,MAAf,CAAsBJ,KAAtB,CAAnB,CAArB;AACAD,MAAAA,YAAY,CAACC,KAAK,GAAG,cAAT,CAAZ;AAEA,UAAIK,GAAG,GAAGT,SAAS,CAACU,OAAV,CAAkBN,KAAlB,CAAV;;AACA,aAAOK,GAAG,IAAI,CAAC,CAAf,EAAkB;AAChBT,QAAAA,SAAS,CAACW,MAAV,CAAiBF,GAAjB,EAAsB,CAAtB;AACAR,QAAAA,YAAY,CAACD,SAAD,CAAZ;AACAS,QAAAA,GAAG,GAAGT,SAAS,CAACU,OAAV,CAAkBN,KAAlB,CAAN;AACD;AAEF,KAZM,MAYA;AACLD,MAAAA,YAAY,CAACC,KAAK,GAAG,gBAAT,CAAZ;AACD;AAKF;;AAED,WAASQ,QAAT,CAAkBC,CAAlB,EAAqB;AACnB,QAAIA,CAAC,CAACC,GAAF,KAAU,OAAd,EAAuB;AACrBD,MAAAA,CAAC,CAACE,MAAF,CAASC,KAAT,GAAiB,EAAjB;AACAV,MAAAA,aAAa;AACd;AACF;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,4BACE;AAAA,gBACGJ;AADH;AAAA;AAAA;AAAA;AAAA,YADF,eAIE,QAAC,SAAD;AAAW,MAAA,UAAU,EAAGW,CAAD,IAAOD,QAAQ,CAACC,CAAD,CAAtC;AAA2C,MAAA,QAAQ,EAAGI,KAAD,IAAWZ,QAAQ,CAACY,KAAK,CAACF,MAAN,CAAaC,KAAd;AAAxE;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GA5CQpB,U;;KAAAA,U;AA8CT,eAAeA,UAAf","sourcesContent":["import React, { useState } from 'react';\nimport TextField from \"@material-ui/core/TextField\";\nimport './GuessInput.css';\n\nfunction GuessInput({ allSolutions, foundSolutions, correctAnswerCallback, remainder, setRemainder }) {\n\n  const [labelText, setLabelText] = useState(\"Make your first guess!\");\n  const [input, setInput] = useState(\"\");\n\n  function evaluateInput() {\n    if (foundSolutions.includes(input)) {\n      setLabelText(input + \" has already been found!\");\n    } else if (allSolutions.includes(input)) {\n      // correctAnswerCallback(input);\n      correctAnswerCallback(foundSolutions => foundSolutions.concat(input));\n      setLabelText(input + \" is correct!\");\n\n      var idx = remainder.indexOf(input);\n      while (idx != -1) {\n        remainder.splice(idx, 1);\n        setRemainder(remainder);\n        idx = remainder.indexOf(input);\n      }\n\n    } else {\n      setLabelText(input + \" is incorrect!\");\n    }\n\n\n\n\n  }\n\n  function keyPress(e) {\n    if (e.key === 'Enter') {\n      e.target.value = \"\";\n      evaluateInput()\n    }\n  }\n\n  return (\n    <div className=\"Guess-input\">\n      <div>\n        {labelText}\n      </div>\n      <TextField onKeyPress={(e) => keyPress(e)} onChange={(event) => setInput(event.target.value)} />\n    </div>\n  );\n}\n\nexport default GuessInput;\n"]},"metadata":{},"sourceType":"module"}