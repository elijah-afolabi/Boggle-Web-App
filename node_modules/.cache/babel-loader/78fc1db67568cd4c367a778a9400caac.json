{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/javis/Documents/GitHub/Boggle-Web-App/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Game from './components/mycomponents';\nimport Button from '@material-ui/core/Button';\nimport Board from './Board.js';\nimport RandomGrid from './random_grid.js';\nimport { Container } from '@material-ui/core';\nimport GuessInput from './GuessInput.js';\nimport { findAllSolutions } from './boggle_solver.js';\nimport data from './full-wordlist.json';\nimport foundSolutions from './FoundSolutions.js';\nimport FoundSolutions from './FoundSolutions.js';\nconst grid = RandomGrid();\nconst solutions = findAllSolutions(grid, data.words);\n\nfunction App() {\n  _s();\n\n  console.log(\"solutions\", solutions);\n  const [start, setStart] = useState(false);\n  const [wasStarted, setWasStarted] = useState(false);\n  const [found, setfound] = useState([]);\n  const [missing, setMissing] = useState([...solutions]);\n  console.log(\"missing\", missing);\n\n  function handleClick() {\n    setStart(true);\n    setWasStarted(true);\n  }\n\n  if (start == false && wasStarted == false) {\n    return /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"#ffcc66\",\n      onClick: () => handleClick(),\n      children: \"Start Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  } else if (start == true) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(Board, {\n          board: grid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(GuessInput, {\n          allSolutions: solutions,\n          foundSolutions: found,\n          correctAnswerCallback: setfound,\n          remainder: missing,\n          setRemainder: setMissing\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"lightblue\",\n          onClick: () => setStart(false),\n          children: \"End the Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FoundSolutions, {\n          words: found,\n          headerText: \"Words Found\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  } else if (start == false && wasStarted == true) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Words that were Missed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: missing.map(solution => {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: solution\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 47\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this);\n  }\n\n  ;\n}\n\n_s(App, \"PY4C5OT7t1pbdmLmiCEKCq5YKcU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/javis/Documents/GitHub/Boggle-Web-App/src/App.js"],"names":["React","useState","Game","Button","Board","RandomGrid","Container","GuessInput","findAllSolutions","data","foundSolutions","FoundSolutions","grid","solutions","words","App","console","log","start","setStart","wasStarted","setWasStarted","found","setfound","missing","setMissing","handleClick","map","solution"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Game from './components/mycomponents';\nimport Button from '@material-ui/core/Button';\nimport Board from './Board.js';\nimport RandomGrid from './random_grid.js'\nimport { Container } from '@material-ui/core';\nimport GuessInput from './GuessInput.js';\nimport { findAllSolutions } from './boggle_solver.js';\nimport data from './full-wordlist.json';\nimport foundSolutions from './FoundSolutions.js';\nimport FoundSolutions from './FoundSolutions.js';\n\n\n\n\nconst grid = RandomGrid();\nconst solutions = findAllSolutions(grid, data.words)\n\n\n\n\n\nfunction App() {\n  console.log(\"solutions\", solutions);\n\n\n  const [start, setStart] = useState(false);\n  const [wasStarted, setWasStarted] = useState(false);\n  const [found, setfound] = useState([]);\n  const [missing, setMissing] = useState([...solutions]);\n  console.log(\"missing\", missing);\n\n\n\n\n\n  function handleClick() {\n    setStart(true);\n    setWasStarted(true);\n  }\n\n  if (start == false && wasStarted == false) {\n    return (\n\n\n\n\n      <Button variant=\"contained\" color= '#ffcc66' onClick={() => handleClick()} >\n        Start Game\n      </Button >\n\n\n\n    );\n  } else if (start == true) {\n    return (\n\n\n      <div className=\"App\">\n        <header className=\"App-header\">\n\n\n\n\n\n\n          <Board board={grid} />\n          <GuessInput allSolutions={solutions} foundSolutions={found} correctAnswerCallback={setfound} remainder={missing} setRemainder={setMissing} />\n          <Button variant=\"contained\" color= \"lightblue\"  onClick={() => setStart(false)} >End the Game</Button >\n\n          <FoundSolutions words={found} headerText={\"Words Found\"} />\n        </header>\n      </div >\n    );\n  }\n\n  else if (start == false && wasStarted == true) {\n    return (\n      <div>\n        <h4>\n          Words that were Missed\n        </h4>\n        <ul>\n          {missing.map((solution) => { return <li>{solution}</li> })}\n        </ul>\n      </div>\n    );\n  };\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}